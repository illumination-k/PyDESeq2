
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_minimal_pydeseq2_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_minimal_pydeseq2_pipeline.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_minimal_pydeseq2_pipeline.py:


A simple PyDESeq2 workflow
===========================

In this example, we show how to perform a simple differential expression analysis on bulk
RNAseq data, using PyDESeq2.

.. contents:: Contents
    :local:
    :depth: 3

We start by importing required packages and setting up an optional path to save results.

.. GENERATED FROM PYTHON SOURCE LINES 14-29

.. code-block:: default


    import os
    import pickle as pkl

    from pydeseq2.dds import DeseqDataSet
    from pydeseq2.ds import DeseqStats
    from pydeseq2.utils import load_example_data

    SAVE = False  # whether to save the outputs of this notebook

    if SAVE:
        # Replace this with the path to directory where you would like results to be saved
        OUTPUT_PATH = "../output_files/synthetic_example"
        os.makedirs(OUTPUT_PATH, exist_ok=True)  # Create path if it doesn't exist








.. GENERATED FROM PYTHON SOURCE LINES 30-50

Data loading
------------

To perform differential expression analysis (DEA), PyDESeq2 requires two types of
inputs:

  * A count matrix of shape 'number of samples' x 'number of genes', containing
    read counts (non-negative integers),
  * Clinical data (or "column" data) of shape 'number of samples' x
    'number of variables', containing sample annotations that will be used
    to split the data in cohorts.

Both should be provided as `pandas dataframes
<https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html>`_.

.. currentmodule:: pydeseq2

To illustrate the required data format, we load a synthetic example dataset that may be
obtained through PyDESeq2's API using :func:`utils.load_example_data`.
You may replace it with your own dataset.

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default


    counts_df = load_example_data(
        modality="raw_counts",
        dataset="synthetic",
        debug=False,
    )

    clinical_df = load_example_data(
        modality="clinical",
        dataset="synthetic",
        debug=False,
    )

    print(counts_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

               gene1  gene2  gene3  gene4  gene5  gene6  gene7  gene8  gene9  gene10
    sample1       12     21      4    130     18      0     16     54     49       3
    sample2        1     44      2     63     11     10     70     32     57       9
    sample3        4      4     11    180     21      3     28     34     65       2
    sample4        1     10      2    100     44      9     28     16     33       9
    sample5        1     11      6    135     16      2     32     29     31       5
    ...          ...    ...    ...    ...    ...    ...    ...    ...    ...     ...
    sample96       7     26      3     67     11      4     41     44     54       1
    sample97       1     14      3     71     33      5     19     42     25       4
    sample98      10     36      2     72     11      2     66     27     16       9
    sample99      18     14      3     66     53     11     32     19     79      11
    sample100     21      9      3     42     13     13     19     78     30       5

    [100 rows x 10 columns]




.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    print(clinical_df)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              condition group
    sample1           A     X
    sample2           A     Y
    sample3           A     X
    sample4           A     Y
    sample5           A     X
    ...             ...   ...
    sample96          B     Y
    sample97          B     X
    sample98          B     Y
    sample99          B     X
    sample100         B     Y

    [100 rows x 2 columns]




.. GENERATED FROM PYTHON SOURCE LINES 70-74

In this example, the clinical data contains two columns, ``condition`` and ``group``,
representing two types of bi-level annotations. In the first part, we will only use the
``condition`` factor. Later on, we'll see how to use both the `condition` and the
``group`` factors in our analysis (see :ref:`multifactor_ref`).

.. GENERATED FROM PYTHON SOURCE LINES 76-87

Data filtering
^^^^^^^^^^^^^^

Before proceeding with DEA, it is good practice to preprocess your data, e.g. to remove
samples for which annotations are missing and exclude genes with very low levels of
expression. This is not necessary in the case of our synthetic data, but don't forget
this step if you are using real data. To this end you can use the code below.

We start by removing samples for which ``condition`` is ``NaN``. If you are using
another dataset, do not forget to change "condition" for the column of ``clinical_df``
you wish to use as a design factor in your analysis.

.. GENERATED FROM PYTHON SOURCE LINES 87-92

.. code-block:: default


    samples_to_keep = ~clinical_df.condition.isna()
    counts_df = counts_df.loc[samples_to_keep]
    clinical_df = clinical_df.loc[samples_to_keep]








.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. note::
  In the case where the design factor contains ``NaN`` entries, PyDESeq2 will throw an
  error when intializing a :class:`DeseqDataSet <dds.DeseqDataSet>`.

.. GENERATED FROM PYTHON SOURCE LINES 98-100

Next, we filter out genes that have less than 10 read counts in total. Note again that
there are no such genes in this synthetic dataset.

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default


    genes_to_keep = counts_df.columns[counts_df.sum(axis=0) >= 10]
    counts_df = counts_df[genes_to_keep]








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Now that we have loaded and filtered our data, we may proceed with the differential
analysis.

.. GENERATED FROM PYTHON SOURCE LINES 110-117

Single factor analysis
--------------------------

In this first analysis, we ignore the ``group`` variable and use the ``condition``
column as our design factor. That is, we compare gene expressions of samples that have
``condition B`` to those that have ``condition A``.


.. GENERATED FROM PYTHON SOURCE LINES 119-129

.. currentmodule:: pydeseq2.dds

Read counts modeling with the :class:`DeseqDataSet` class
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We start by creating a :class:`DeseqDataSet`
object from the count and clinical data.
A :class:`DeseqDataSet` fits dispersion and
log-fold change (LFC) parameters from the data, and stores them.


.. GENERATED FROM PYTHON SOURCE LINES 129-138

.. code-block:: default


    dds = DeseqDataSet(
        counts_df,
        clinical_df,
        design_factors="condition",
        refit_cooks=True,
        n_cpus=8,
    )








.. GENERATED FROM PYTHON SOURCE LINES 139-168

A :class:`DeseqDataSet` has two mandatory
arguments: a ``counts`` and a ``clinical`` dataframe, like the ones we've loaded in the
first part of this tutorial.

Next, we should specify the ``design_factor``, i.e. the column of the ``clinical``
dataframe that will be used to compare samples. This can be a single string as above,
or a list of strings, as in the
:ref:`section on multifactor analysis<multifactor_ref>`.

.. note::
  The ``"condition"`` argument passed to ``design_factors`` corresponds to a column
  from the ``clinical_df`` dataframe we loaded earlier.
  You might need to change it according to your own dataset.

Several other arguments may be optionally specified (see the :doc:`API documentation
</api/docstrings/pydeseq2.dds.DeseqDataSet>`).
Among those, the ``refit_cooks`` argument (set to ``True`` by default), controls
whether Cooks outlier should be refitted (which is advised, in general) and ``n_cpus``
sets the number of CPUs to use for computation. Here, we use 8 threads. Feel free to
adapt this to your setup or to set to ``None`` to use all available CPUs.

.. note::
    In the case of the provided synthetic data, there won't be any Cooks outliers.

Once a :class:`DeseqDataSet` was initialized,
we may run the :meth:`deseq2() <DeseqDataSet.deseq2>` method
to fit dispersions and LFCs.



.. GENERATED FROM PYTHON SOURCE LINES 168-177

.. code-block:: default



    dds.deseq2()


    if SAVE:
        with open(os.path.join(OUTPUT_PATH, "dds.pkl"), "wb") as f:
            pkl.dump(dds, f)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting size factors...
    ... done in 0.00 seconds.

    Fitting dispersions...
    ... done in 0.01 seconds.

    Fitting dispersion trend curve...
    ... done in 0.02 seconds.

    Fitting MAP dispersions...
    ... done in 0.01 seconds.

    Fitting LFCs...
    ... done in 0.01 seconds.

    Refitting 0 outliers.





.. GENERATED FROM PYTHON SOURCE LINES 178-179

If needed, we may now access the fitted dispersions and LFCs (in natural log scale):

.. GENERATED FROM PYTHON SOURCE LINES 179-182

.. code-block:: default


    print(dds.dispersions)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    gene1     0.882599
    gene2     0.222579
    gene3     0.837238
    gene4     0.158970
    gene5     0.249926
    gene6     0.973648
    gene7     0.235155
    gene8     0.198781
    gene9     0.186520
    gene10    0.631900
    dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 183-186

.. code-block:: default


    print(dds.LFCs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

            intercept  condition_B
    gene1    1.891436     0.438632
    gene2    2.851662     0.373296
    gene3    1.787780    -0.438645
    gene4    4.741958    -0.285647
    gene5    3.077798     0.403457
    gene6    1.678536     0.001010
    gene7    3.291025     0.093116
    gene8    3.785129    -0.187604
    gene9    3.682882    -0.147443
    gene10   2.300515     0.267562




.. GENERATED FROM PYTHON SOURCE LINES 187-197

.. currentmodule:: pydeseq2.ds

Statistical analysis with the :class:`DeseqStats` class
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now that dispersions and LFCs were fitted, we may proceed with statistical tests to
compute p-values and adjusted p-values for differential expresion. This is the role of
the :class:`DeseqStats` class. It has a unique mandatory argument, ``dds``, which
should be a *fitted* :class:`DeseqDataSet <pydeseq2.dds.DeseqDataSet>`
object.

.. GENERATED FROM PYTHON SOURCE LINES 197-200

.. code-block:: default


    stat_res = DeseqStats(dds, n_cpus=8)








.. GENERATED FROM PYTHON SOURCE LINES 201-214

It also has a set of optional keyword arguments (see the :doc:`API documentation
</api/docstrings/pydeseq2.ds.DeseqStats>`), among which:

- ``alpha``: the p-value and adjusted p-value significance threshold (``0.05``
  by default),
- ``cooks_filter``: whether to filter p-values based on cooks outliers
  (``True`` by default),
- ``independent_filter``: whether to perform independent filtering to correct
  p-value trends (``True`` by default).

In the :ref:`section on multifactor analysis<multifactor_ref>`, we will also see how
to use the ``contrast`` argument to specify according to which variable samples should
be compared.

.. GENERATED FROM PYTHON SOURCE LINES 216-224

.. _wald_ref:

Wald test
""""""""""

PyDESeq2 computes p-values using Wald tests. This can be done using the
:meth:`summary() <DeseqStats.summary>` method, which runs the whole statistical
analysis, cooks filtering and multiple testing adjustement included.

.. GENERATED FROM PYTHON SOURCE LINES 224-231

.. code-block:: default


    stat_res.summary()

    if SAVE:
        with open(os.path.join(OUTPUT_PATH, "stat_results.pkl"), "wb") as f:
            pkl.dump(stat_res, f)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running Wald tests...
    ... done in 0.01 seconds.

    Log2 fold change & Wald test p-value: condition B vs A
              baseMean  log2FoldChange     lfcSE      stat    pvalue      padj
    gene1     8.541317        0.632812  0.289101  2.188897  0.028604  0.064150
    gene2    21.281239        0.538552  0.149963  3.591234  0.000329  0.001646
    gene3     5.010123       -0.632830  0.295236 -2.143475  0.032075  0.064150
    gene4   100.517961       -0.412102  0.118629 -3.473867  0.000513  0.001710
    gene5    27.142450        0.582065  0.154706  3.762409  0.000168  0.001646
    gene6     5.413043        0.001457  0.310311  0.004696  0.996253  0.996253
    gene7    28.294023        0.134338  0.149945  0.895917  0.370297  0.411441
    gene8    40.358344       -0.270656  0.136401 -1.984260  0.047227  0.078711
    gene9    37.166183       -0.212715  0.133243 -1.596437  0.110391  0.143148
    gene10   11.589325        0.386011  0.244588  1.578207  0.114518  0.143148




.. GENERATED FROM PYTHON SOURCE LINES 232-233

The results are then stored in the ``results_df`` attribute (``stat_res.results_df``).

.. GENERATED FROM PYTHON SOURCE LINES 235-241

LFC shrinkage
"""""""""""""

For visualization or post-processing purposes, it might be suitable to perform
LFC shrinkage. This is implemented by the :meth:`lfc_shrink() <DeseqStats.lfc_shrink>`
method.

.. GENERATED FROM PYTHON SOURCE LINES 241-248

.. code-block:: default


    stat_res.lfc_shrink()

    if SAVE:
        with open(os.path.join(OUTPUT_PATH, "shrunk_stat_results.pkl"), "wb") as f:
            pkl.dump(stat_res, f)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting MAP LFCs...
    ... done in 0.01 seconds.

    Shrunk Log2 fold change & Wald test p-value: condition B vs A
              baseMean  log2FoldChange     lfcSE      stat    pvalue      padj
    gene1     8.541317        0.408253  0.294276  2.188897  0.028604  0.064150
    gene2    21.281239        0.480145  0.151201  3.591234  0.000329  0.001646
    gene3     5.010123       -0.396066  0.300796 -2.143475  0.032075  0.064150
    gene4   100.517961       -0.374191  0.118704 -3.473867  0.000513  0.001710
    gene5    27.142450        0.521487  0.156210  3.762409  0.000168  0.001646
    gene6     5.413043        0.000716  0.239203  0.004696  0.996253  0.996253
    gene7    28.294023        0.103421  0.141496  0.895917  0.370297  0.411441
    gene8    40.358344       -0.226288  0.133477 -1.984260  0.047227  0.078711
    gene9    37.166183       -0.175746  0.129138 -1.596437  0.110391  0.143148
    gene10   11.589325        0.239935  0.231986  1.578207  0.114518  0.143148




.. GENERATED FROM PYTHON SOURCE LINES 249-254

.. note::
  Running :meth:`lfc_shrink() <DeseqStats.lfc_shrink>` will overwrite a
  :class:`DeseqStats`' log fold changes (and standard errors) with shrunk values.
  This can be checked using the ``shrunk_LFCs`` flag.


.. GENERATED FROM PYTHON SOURCE LINES 254-257

.. code-block:: default


    print(stat_res.shrunk_LFCs)  # Will be True only if lfc_shrink() was run.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True




.. GENERATED FROM PYTHON SOURCE LINES 258-268

.. _multifactor_ref:

Multifactor analysis
---------------------

.. currentmodule:: pydeseq2.dds

So far, we have only used the ``condition`` column of ``clinical_df``, which divides
samples between conditions ``A`` and ``B``. Yet, ``clinical_df`` contains second
column, which separates samples according to ``group`` ``X`` and ``Y``.

.. GENERATED FROM PYTHON SOURCE LINES 268-271

.. code-block:: default


    print(clinical_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              condition group
    sample1           A     X
    sample2           A     Y
    sample3           A     X
    sample4           A     Y
    sample5           A     X
    ...             ...   ...
    sample96          B     Y
    sample97          B     X
    sample98          B     Y
    sample99          B     X
    sample100         B     Y

    [100 rows x 2 columns]




.. GENERATED FROM PYTHON SOURCE LINES 272-281

The goal of multifactor analysis is to use *both* variables to fit LFCs.

Read counts modeling
^^^^^^^^^^^^^^^^^^^^^

To perform multifactor analysis with PyDESeq2, we start by inializing a
:class:`DeseqDataSet` as previously, but we provide the list of variables we would like
to use in the ``design_factors`` argument.


.. GENERATED FROM PYTHON SOURCE LINES 281-289

.. code-block:: default


    dds = DeseqDataSet(
        counts_df,
        clinical_df,
        design_factors=["group", "condition"],
        refit_cooks=True,
        n_cpus=8,
    )







.. GENERATED FROM PYTHON SOURCE LINES 290-297

.. note::
  By default, the last variable in the list (here, ``"condition"``) will be the one for
  which LFCs and p-values will be displayed, but this may be changed later on when
  performing the statistical analysis.

As for the single-factor analysis, we fit dispersions and LFCs using the
:meth:`deseq2() <DeseqDataSet.deseq2>` method.

.. GENERATED FROM PYTHON SOURCE LINES 297-300

.. code-block:: default


    dds.deseq2()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting size factors...
    ... done in 0.00 seconds.

    Fitting dispersions...
    ... done in 0.01 seconds.

    Fitting dispersion trend curve...
    ... done in 0.02 seconds.

    Fitting MAP dispersions...
    ... done in 0.01 seconds.

    Fitting LFCs...
    ... done in 0.01 seconds.

    Refitting 0 outliers.





.. GENERATED FROM PYTHON SOURCE LINES 301-303

Now, if we print log fold changes, we will have two columns in addition to the
intercept: one corresponding to the ``group`` variable, and the other to ``condition``.

.. GENERATED FROM PYTHON SOURCE LINES 303-306

.. code-block:: default


    print(dds.LFCs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

            intercept   group_X  condition_B
    gene1    2.085886 -0.525572     0.507013
    gene2    2.891484 -0.079229     0.371026
    gene3    1.456971  0.602606    -0.467002
    gene4    4.534641  0.385197    -0.293527
    gene5    3.167880 -0.194078     0.407582
    gene6    1.493651  0.352410    -0.013510
    gene7    3.342740 -0.106773     0.093654
    gene8    3.911283 -0.270819    -0.188248
    gene9    3.719808 -0.074474    -0.148346
    gene10   2.439679 -0.303009     0.270003




.. GENERATED FROM PYTHON SOURCE LINES 307-321

.. currentmodule:: pydeseq2.ds

Statistical analysis
^^^^^^^^^^^^^^^^^^^^

P-values are computed as earlier from a :class:`DeseqStats` object with the
:meth:`summary() <DeseqStats.summary>` method, with a new important argument:
the ``contrast``.
It is a list of three strings of the form
``["variable", "tested level", "reference level"]`` which determines which
variable we want to compute LFCs and pvalues for.
As an example, to compare the condition B to the condition A, we set
``contrast=["condition", "B", "A"]``.


.. GENERATED FROM PYTHON SOURCE LINES 321-324

.. code-block:: default


    stat_res_B_vs_A = DeseqStats(dds, contrast=["condition", "B", "A"], n_cpus=8)








.. GENERATED FROM PYTHON SOURCE LINES 325-335

.. note::
  If left blank, the variable of interest will be the last one provided in
  the ``design_factors`` attribute of the corresponding
  :class:`DeseqDataSet <pydeseq2.dds.DeseqDataSet>` object,
  and the reference level will be picked alphabetically.
  In any case, *both variables are still used*. This is due to the fact that ``dds``
  was fit with both as design factors.

Let us fit p-values:


.. GENERATED FROM PYTHON SOURCE LINES 335-339

.. code-block:: default


    stat_res_B_vs_A.summary()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running Wald tests...
    ... done in 0.01 seconds.

    Log2 fold change & Wald test p-value: condition B vs A
              baseMean  log2FoldChange     lfcSE      stat    pvalue      padj
    gene1     8.541317        0.731466  0.286275  2.555117  0.010615  0.026538
    gene2    21.281239        0.535278  0.149824  3.572711  0.000353  0.001178
    gene3     5.010123       -0.673742  0.287400 -2.344268  0.019064  0.038129
    gene4   100.517961       -0.423471  0.106221 -3.986711  0.000067  0.000592
    gene5    27.142450        0.588016  0.152758  3.849328  0.000118  0.000592
    gene6     5.413043       -0.019490  0.307845 -0.063313  0.949518  0.949518
    gene7    28.294023        0.135114  0.149561  0.903410  0.366308  0.407009
    gene8    40.358344       -0.271584  0.131512 -2.065083  0.038915  0.064859
    gene9    37.166183       -0.214018  0.132989 -1.609289  0.107553  0.139684
    gene10   11.589325        0.389532  0.244929  1.590388  0.111747  0.139684




.. GENERATED FROM PYTHON SOURCE LINES 340-348

As we can see, although we are comparing the same cohorts (condition B vs A), the
results differ from the :ref:`single-factor analysis <wald_ref>`. This is because the
model uses information from both the ``condition`` and ``group`` variables.

Let us now evaluate differential expression according to group Y vs X. To do so,
we create a new :class:`DeseqStats` from the same
:class:`DeseqDataSet <pydeseq2.dds.DeseqDataSet>`
with ``contrast=["group", "Y", "X"]``, and run the analysis again.

.. GENERATED FROM PYTHON SOURCE LINES 348-352

.. code-block:: default


    stat_res_Y_vs_X = DeseqStats(dds, contrast=["group", "Y", "X"], n_cpus=8)
    stat_res_Y_vs_X.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running Wald tests...
    ... done in 0.01 seconds.

    Log2 fold change & Wald test p-value: group Y vs X
              baseMean  log2FoldChange     lfcSE      stat        pvalue      padj
    gene1     8.541317        0.758241  0.286328  2.648155  8.093250e-03  0.020233
    gene2    21.281239        0.114304  0.149771  0.763188  4.453510e-01  0.445351
    gene3     5.010123       -0.869376  0.287516 -3.023748  2.496642e-03  0.009903
    gene4   100.517961       -0.555721  0.106221 -5.231722  1.679378e-07  0.000002
    gene5    27.142450        0.279995  0.152731  1.833254  6.676478e-02  0.123874
    gene6     5.413043       -0.508421  0.307951 -1.650981  9.874255e-02  0.141061
    gene7    28.294023        0.154041  0.149565  1.029927  3.030444e-01  0.378806
    gene8    40.358344        0.390709  0.131520  2.970730  2.970930e-03  0.009903
    gene9    37.166183        0.107443  0.132981  0.807956  4.191158e-01  0.445351
    gene10   11.589325        0.437149  0.244955  1.784611  7.432443e-02  0.123874




.. GENERATED FROM PYTHON SOURCE LINES 353-359

LFC shrinkage (multifactor)
"""""""""""""""""""""""""""

In a multifactor setting, LFC shrinkage works as in the single-factor case, but will
only shrink the LFCs of a :class:`DeseqStats` object based on its
``contrast`` argument.

.. GENERATED FROM PYTHON SOURCE LINES 359-361

.. code-block:: default


    stat_res_B_vs_A.lfc_shrink()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting MAP LFCs...
    ... done in 0.01 seconds.

    Shrunk Log2 fold change & Wald test p-value: condition B vs A
              baseMean  log2FoldChange     lfcSE      stat    pvalue      padj
    gene1     8.541317        0.526886  0.297011  2.555117  0.010615  0.026538
    gene2    21.281239        0.479484  0.150885  3.572711  0.000353  0.001178
    gene3     5.010123       -0.463835  0.295584 -2.344268  0.019064  0.038129
    gene4   100.517961       -0.394923  0.106333 -3.986711  0.000067  0.000592
    gene5    27.142450        0.531599  0.154007  3.849328  0.000118  0.000592
    gene6     5.413043       -0.008700  0.245432 -0.063313  0.949518  0.949518
    gene7    28.294023        0.106446  0.141941  0.903410  0.366308  0.407009
    gene8    40.358344       -0.232930  0.129044 -2.065083  0.038915  0.064859
    gene9    37.166183       -0.179635  0.129136 -1.609289  0.107553  0.139684
    gene10   11.589325        0.251522  0.233358  1.590388  0.111747  0.139684





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.704 seconds)


.. _sphx_glr_download_auto_examples_plot_minimal_pydeseq2_pipeline.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/Owkin/PyDESeq2/7e428c725dffce038463931d023e3bc0450262e1?urlpath=lab/tree/jupyter_notebooks/auto_examples/plot_minimal_pydeseq2_pipeline.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_minimal_pydeseq2_pipeline.py <plot_minimal_pydeseq2_pipeline.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_minimal_pydeseq2_pipeline.ipynb <plot_minimal_pydeseq2_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
