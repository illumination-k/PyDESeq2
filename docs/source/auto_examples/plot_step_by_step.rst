
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_step_by_step.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_step_by_step.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_step_by_step.py:


Step-by-step PyDESeq2 workflow
===============================

This notebook details all the steps of the PyDESeq2 pipeline.

It allows you to run the PyDESeq2 pipeline on the synthetic data provided
in this repository.

If this is your first contact with PyDESeq2, we recommend you first have a look at the
:doc:`standard workflow example <plot_minimal_pydeseq2_pipeline>`.

.. contents:: Contents
    :local:
    :depth: 3

We start by importing required packages and setting up an optional path to save
results.

.. GENERATED FROM PYTHON SOURCE LINES 20-36

.. code-block:: default


    import os
    import pickle as pkl

    from pydeseq2.dds import DeseqDataSet
    from pydeseq2.ds import DeseqStats
    from pydeseq2.utils import load_example_data

    SAVE = False  # whether to save the outputs of this notebook

    if SAVE:
        # Replace this with the path to directory where you would like results to be
        # saved
        OUTPUT_PATH = "../output_files/synthetic_example"
        os.makedirs(OUTPUT_PATH, exist_ok=True)  # Create path if it doesn't exist








.. GENERATED FROM PYTHON SOURCE LINES 37-59

Data loading
------------

Note that we are also explaining this step in the 'getting started' example.
To perform differential expression analysis (DEA), PyDESeq2 requires two types of
inputs:

  * A count matrix of shape 'number of samples' x 'number of genes', containing
    read counts (non-negative integers),
  * Clinical data (or "column" data) of shape 'number of samples' x
    'number of variables', containing sample annotations that will be used
    to split the data in cohorts.

Both should be provided as `pandas dataframes
<https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html>`_.

.. currentmodule:: pydeseq2

To illustrate the required data format, we load a synthetic example dataset
that may be
obtained through PyDESeq2's API using :func:`utils.load_example_data`.
You may replace it with your own dataset.

.. GENERATED FROM PYTHON SOURCE LINES 59-72

.. code-block:: default


    counts_df = load_example_data(
        modality="raw_counts",
        dataset="synthetic",
        debug=False,
    )

    clinical_df = load_example_data(
        modality="clinical",
        dataset="synthetic",
        debug=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 73-89

1. Read counts modeling
-----------------------
Read counts modeling with the :class:`DeseqDataSet
<dds.DeseqDataSet>` class

The :class:`DeseqDataSet <dds.DeseqDataSet>` class has two mandatory
arguments, `counts_df` and
`clinical_df`, as well as a set of optional keyword arguments, among which:

- `design_factor`: the name of the column of clinical to be used as a design
  variable
- `refit_cooks`: whether to refit cooks outliers – this is advised, in general.

.. note::
  in the case of the provided synthetic data, there won't be any Cooks
  outliers.

.. GENERATED FROM PYTHON SOURCE LINES 89-99

.. code-block:: default


    dds = DeseqDataSet(
        counts_df,
        clinical_df,
        design_factors="condition",  # compare samples based on the "condition"
        # column ("B" vs "A")
        refit_cooks=True,
        n_cpus=8,
    )








.. GENERATED FROM PYTHON SOURCE LINES 100-102

Compute normalization factors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 102-107

.. code-block:: default


    dds.fit_size_factors()

    dds.size_factors





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting size factors...
    ... done in 0.00 seconds.


    sample1      1.228981
    sample2      1.188774
    sample3      0.997222
    sample4      1.002158
    sample5      0.834577
                   ...   
    sample96     1.269359
    sample97     0.743998
    sample98     0.739878
    sample99     0.958880
    sample100    0.635708
    Length: 100, dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 108-110

Fit genewise dispersions
^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 110-115

.. code-block:: default


    dds.fit_genewise_dispersions()

    dds.genewise_dispersions





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting dispersions...
    ... done in 0.01 seconds.


    gene1     0.910135
    gene2     0.213718
    gene3     0.813594
    gene4     0.161362
    gene5     0.248504
    gene6     0.973077
    gene7     0.233030
    gene8     0.198103
    gene9     0.183636
    gene10    0.646375
    dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 116-118

Fit dispersion trend coefficients
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 118-123

.. code-block:: default


    dds.fit_dispersion_trend()
    dds.trend_coeffs
    dds.fitted_dispersions





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting dispersion trend curve...
    ... done in 0.02 seconds.


    gene1     0.651428
    gene2     0.313002
    gene3     1.049871
    gene4     0.134146
    gene5     0.264007
    gene6     0.978133
    gene7     0.256766
    gene8     0.205752
    gene9     0.216028
    gene10    0.502748
    dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 124-126

Dispersion priors
^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 126-130

.. code-block:: default


    dds.fit_dispersion_prior()
    print(f"logres_prior={dds._squared_logres}, sigma_prior={dds.prior_disp_var}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    logres_prior=0.04467369756852299, sigma_prior=0.25




.. GENERATED FROM PYTHON SOURCE LINES 131-139

MAP Dispersions
^^^^^^^^^^^^^^^
The `fit_MAP_dispersions` method filters the genes for which dispersion
shrinkage is applied.
Indeed, for genes whose MLE dispersions are too high above the trend curve,
the original MLE value is kept.
The final values of the dispersions that are used for downstream analysis is
stored in `dds.dispersions`.

.. GENERATED FROM PYTHON SOURCE LINES 139-144

.. code-block:: default


    dds.fit_MAP_dispersions()
    dds.MAP_dispersions
    dds.dispersions





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting MAP dispersions...
    ... done in 0.01 seconds.


    gene1     0.882599
    gene2     0.222579
    gene3     0.837238
    gene4     0.158970
    gene5     0.249926
    gene6     0.973648
    gene7     0.235155
    gene8     0.198781
    gene9     0.186520
    gene10    0.631900
    dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 145-151

Fit log fold changes
^^^^^^^^^^^^^^^^^^^^
Note that in the `DeseqDataSet` object, the log-fold changes are stored in
natural
log scale, but that the results dataframe output by the `summary` method of
`DeseqStats` displays LFCs in log2 scale (see later on).

.. GENERATED FROM PYTHON SOURCE LINES 151-155

.. code-block:: default


    dds.fit_LFC()
    dds.LFCs





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting LFCs...
    ... done in 0.01 seconds.



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>intercept</th>
          <th>condition_B</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>gene1</th>
          <td>1.891436</td>
          <td>0.438632</td>
        </tr>
        <tr>
          <th>gene2</th>
          <td>2.851662</td>
          <td>0.373296</td>
        </tr>
        <tr>
          <th>gene3</th>
          <td>1.787780</td>
          <td>-0.438645</td>
        </tr>
        <tr>
          <th>gene4</th>
          <td>4.741958</td>
          <td>-0.285647</td>
        </tr>
        <tr>
          <th>gene5</th>
          <td>3.077798</td>
          <td>0.403457</td>
        </tr>
        <tr>
          <th>gene6</th>
          <td>1.678536</td>
          <td>0.001010</td>
        </tr>
        <tr>
          <th>gene7</th>
          <td>3.291025</td>
          <td>0.093116</td>
        </tr>
        <tr>
          <th>gene8</th>
          <td>3.785129</td>
          <td>-0.187604</td>
        </tr>
        <tr>
          <th>gene9</th>
          <td>3.682882</td>
          <td>-0.147443</td>
        </tr>
        <tr>
          <th>gene10</th>
          <td>2.300515</td>
          <td>0.267562</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 156-159

Calculate Cooks distances and refit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note that this step is optional.

.. GENERATED FROM PYTHON SOURCE LINES 159-165

.. code-block:: default


    dds.calculate_cooks()
    if dds.refit_cooks:
        # Replace outlier counts
        dds.refit()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Refitting 0 outliers.





.. GENERATED FROM PYTHON SOURCE LINES 166-167

Save everything

.. GENERATED FROM PYTHON SOURCE LINES 167-172

.. code-block:: default


    if SAVE:
        with open(os.path.join(OUTPUT_PATH, "dds_detailed_pipe.pkl"), "wb") as f:
            pkl.dump(dds, f)








.. GENERATED FROM PYTHON SOURCE LINES 173-184

2. Statistical analysis
-----------------------
Statistical analysis with the :class:`DeseqStats <ds.DeseqStats>` class.
The `DeseqDataSet` class has a unique mandatory arguments, `dds`, which should
be a *fitted* `DeseqDataSet` object, as well as a set of optional keyword
arguments, among which:

- `alpha`: the p-value and adjusted p-value significance threshold
- `cooks_filter`: whether to filter p-values based on cooks outliers
- `independent_filter`: whether to perform independent filtering to correct
  p-value trends.

.. GENERATED FROM PYTHON SOURCE LINES 184-187

.. code-block:: default


    stat_res = DeseqStats(dds, alpha=0.05, cooks_filter=True, independent_filter=True)








.. GENERATED FROM PYTHON SOURCE LINES 188-190

Wald tests
^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 190-194

.. code-block:: default


    stat_res.run_wald_test()
    stat_res.p_values





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Running Wald tests...
    ... done in 0.01 seconds.


    gene1     0.028604
    gene2     0.000329
    gene3     0.032075
    gene4     0.000513
    gene5     0.000168
    gene6     0.996253
    gene7     0.370297
    gene8     0.047227
    gene9     0.110391
    gene10    0.114518
    dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 195-202

Cooks filtering
^^^^^^^^^^^^^^^
This is optional

.. note::
  Note: in the case of the provided synthetic data, there won't be any
  outliers.

.. GENERATED FROM PYTHON SOURCE LINES 202-207

.. code-block:: default


    if stat_res.cooks_filter:
        stat_res._cooks_filtering()
    stat_res.p_values





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    gene1     0.028604
    gene2     0.000329
    gene3     0.032075
    gene4     0.000513
    gene5     0.000168
    gene6     0.996253
    gene7     0.370297
    gene8     0.047227
    gene9     0.110391
    gene10    0.114518
    dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 208-210

P-value adjustment
^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 210-218

.. code-block:: default


    if stat_res.independent_filter:
        stat_res._independent_filtering()
    else:
        stat_res._p_value_adjustment()

    stat_res.padj





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    gene1     0.064150
    gene2     0.001646
    gene3     0.064150
    gene4     0.001710
    gene5     0.001646
    gene6     0.996253
    gene7     0.411441
    gene8     0.078711
    gene9     0.143148
    gene10    0.143148
    Name: 0, dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 219-223

Building a results dataframe
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This dataframe is stored in the `results_df` attribute of the `DeseqStats`
class.

.. GENERATED FROM PYTHON SOURCE LINES 223-226

.. code-block:: default


    stat_res.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Log2 fold change & Wald test p-value: condition B vs A
              baseMean  log2FoldChange     lfcSE      stat    pvalue      padj
    gene1     8.541317        0.632812  0.289101  2.188897  0.028604  0.064150
    gene2    21.281239        0.538552  0.149963  3.591234  0.000329  0.001646
    gene3     5.010123       -0.632830  0.295236 -2.143475  0.032075  0.064150
    gene4   100.517961       -0.412102  0.118629 -3.473867  0.000513  0.001710
    gene5    27.142450        0.582065  0.154706  3.762409  0.000168  0.001646
    gene6     5.413043        0.001457  0.310311  0.004696  0.996253  0.996253
    gene7    28.294023        0.134338  0.149945  0.895917  0.370297  0.411441
    gene8    40.358344       -0.270656  0.136401 -1.984260  0.047227  0.078711
    gene9    37.166183       -0.212715  0.133243 -1.596437  0.110391  0.143148
    gene10   11.589325        0.386011  0.244588  1.578207  0.114518  0.143148




.. GENERATED FROM PYTHON SOURCE LINES 227-228

Save everything if SAVE is set to True

.. GENERATED FROM PYTHON SOURCE LINES 228-233

.. code-block:: default


    if SAVE:
        with open(os.path.join(OUTPUT_PATH, "stat_results_detailed_pipe.pkl"), "wb") as f:
            pkl.dump(stat_res, f)








.. GENERATED FROM PYTHON SOURCE LINES 234-238

LFC Shrinkage
^^^^^^^^^^^^^
For visualization or post-processing purposes, it might be suitable to perform
LFC shrinkage. This is implemented by the `lfc_shrink` method.

.. GENERATED FROM PYTHON SOURCE LINES 238-242

.. code-block:: default


    stat_res.lfc_shrink()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting MAP LFCs...
    ... done in 0.01 seconds.

    Shrunk Log2 fold change & Wald test p-value: condition B vs A
              baseMean  log2FoldChange     lfcSE      stat    pvalue      padj
    gene1     8.541317        0.408253  0.294276  2.188897  0.028604  0.064150
    gene2    21.281239        0.480145  0.151201  3.591234  0.000329  0.001646
    gene3     5.010123       -0.396066  0.300796 -2.143475  0.032075  0.064150
    gene4   100.517961       -0.374191  0.118704 -3.473867  0.000513  0.001710
    gene5    27.142450        0.521487  0.156210  3.762409  0.000168  0.001646
    gene6     5.413043        0.000716  0.239203  0.004696  0.996253  0.996253
    gene7    28.294023        0.103421  0.141496  0.895917  0.370297  0.411441
    gene8    40.358344       -0.226288  0.133477 -1.984260  0.047227  0.078711
    gene9    37.166183       -0.175746  0.129138 -1.596437  0.110391  0.143148
    gene10   11.589325        0.239935  0.231986  1.578207  0.114518  0.143148




.. GENERATED FROM PYTHON SOURCE LINES 243-244

Save everything

.. GENERATED FROM PYTHON SOURCE LINES 244-250

.. code-block:: default


    if SAVE:
        with open(
            os.path.join(OUTPUT_PATH, "shrunk_stat_results_detailed_pipe.pkl"), "wb"
        ) as f:
            pkl.dump(stat_res, f)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.225 seconds)


.. _sphx_glr_download_auto_examples_plot_step_by_step.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/Owkin/PyDESeq2/7e428c725dffce038463931d023e3bc0450262e1?urlpath=lab/tree/jupyter_notebooks/auto_examples/plot_step_by_step.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_step_by_step.py <plot_step_by_step.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_step_by_step.ipynb <plot_step_by_step.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
